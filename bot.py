import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, InlineQueryHandler, ContextTypes
from telegram import InlineQueryResultArticle, InputTextMessageContent
from telegram.constants import ParseMode
from config import BOT_TOKEN
from utils.ytsearch import search_youtube_multiple, search_youtube, save_user_search, get_smart_recommendations
from utils.downloader import download_audio
from utils.lyrics import get_lyrics
from utils.recommender import store_artist, get_recommendations
from uuid import uuid4
import time
from functools import lru_cache
import json

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
os.makedirs("logs", exist_ok=True)
os.makedirs("downloads", exist_ok=True)
os.makedirs("data", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = f'logs/bot_{datetime.now().strftime("%Y-%m-%d")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = "data/users.json"
STATS_FILE = "data/stats.json"

def load_json_file(filename, default=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–æ–≤"""
    if default is None:
        default = {}
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return default

def save_json_file(filename, data):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return load_json_file(USERS_FILE, {})

def save_users(users_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    save_json_file(USERS_FILE, users_data)

def load_stats():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return load_json_file(STATS_FILE, {
        "total_users": 0, 
        "total_searches": 0, 
        "total_downloads": 0,
        "total_lyrics": 0,
        "bot_started": datetime.now().isoformat()
    })

def save_stats(stats_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    save_json_file(STATS_FILE, stats_data)

def log_user_action(user, action, details=""):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = f"@{user.username}" if user.username else f"ID:{user.id}"
    full_name = f"{user.first_name} {user.last_name or ''}".strip()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
    logger.info(f"üë§ USER: {user_info} ({full_name}) | ACTION: {action} | DETAILS: {details}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data = load_users()
    user_key = str(user.id)
    current_time = datetime.now().isoformat()
    
    if user_key not in users_data:
        users_data[user_key] = {
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "first_seen": current_time,
            "actions": [],
            "total_actions": 0
        }
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stats = load_stats()
        stats["total_users"] += 1
        save_stats(stats)
        
        logger.info(f"üÜï NEW USER: {user_info} ({full_name})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[user_key]["last_seen"] = current_time
    users_data[user_key]["username"] = user.username  # –û–±–Ω–æ–≤–ª—è–µ–º username
    users_data[user_key]["actions"].append({
        "action": action,
        "details": details,
        "timestamp": current_time
    })
    users_data[user_key]["total_actions"] += 1
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
    if len(users_data[user_key]["actions"]) > 100:
        users_data[user_key]["actions"] = users_data[user_key]["actions"][-100:]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = load_stats()
    if action == "search":
        stats["total_searches"] += 1
    elif action == "download":
        stats["total_downloads"] += 1
    elif action == "lyrics_request":
        stats["total_lyrics"] += 1
    
    save_stats(stats)
    save_users(users_data)

# –ö—ç—à –¥–ª—è –ø–æ–∏—Å–∫–∞
search_cache = {}
CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

def get_cached_search(query, count=6):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    cache_key = f"{query}_{count}"
    current_time = time.time()
    
    if cache_key in search_cache:
        cached_data, timestamp = search_cache[cache_key]
        if current_time - timestamp < CACHE_TIMEOUT:
            logger.info(f"üîÑ CACHE HIT: {query}")
            return cached_data
    
    # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
    logger.info(f"üîç NEW SEARCH: {query}")
    try:
        results = search_youtube_multiple(query, count)
        search_cache[cache_key] = (results, current_time)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
        if len(search_cache) > 50:
            oldest_key = min(search_cache.keys(), key=lambda k: search_cache[k][1])
            del search_cache[oldest_key]
        
        return results
    except Exception as e:
        logger.error(f"Search error for '{query}': {e}")
        return []

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_search_results = {}
user_modes = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user = update.effective_user
    log_user_action(user, "start", "Bot started")
    
    welcome_text = """üéµ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Music Search Bot!</b> üéµ

üî• <i>–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</i>

<b>‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üéØ –ü–æ–∏—Å–∫ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ 5+ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
üé≠ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É
üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω
üé™ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (5+ –ø–µ—Å–µ–Ω)
üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ MP3

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞!</b>
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏", callback_data="search_song"),
            InlineKeyboardButton("üé≠ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É", callback_data="search_artist")
        ],
        [
            InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="get_lyrics"),
            InlineKeyboardButton("üéµ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommend")
        ]
    ]
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_id = user.id
    
    if query.data == "search_song":
        user_modes[user_id] = "search_song"
        log_user_action(user, "mode_change", "search_song")
        await query.message.reply_text(
            "üîç <b>–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è –Ω–∞–π–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ üéµ",
            parse_mode=ParseMode.HTML
        )
    
    elif query.data == "search_artist":
        user_modes[user_id] = "search_artist"
        log_user_action(user, "mode_change", "search_artist")
        await query.message.reply_text(
            "üé≠ <b>–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ù–∞–ø–∏—à–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏ üåü",
            parse_mode=ParseMode.HTML
        )
    
    elif query.data == "get_lyrics":
        user_modes[user_id] = "lyrics"
        log_user_action(user, "mode_change", "lyrics")
        await query.message.reply_text(
            "üìú <b>–†–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ üé§",
            parse_mode=ParseMode.HTML
        )
    
    elif query.data == "recommend":
        log_user_action(user, "button_click", "recommendations")
        await show_recommendations(query.message, user_id)
    
    elif query.data.startswith("download_"):
        await handle_download(query, user_id)
    
    elif query.data.startswith("lyrics_"):
        await handle_lyrics_from_search(query, user_id)

async def show_recommendations(message, user_id):
    """–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        recs = get_recommendations(user_id)
        
        if not recs:
            keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search_song")]]
            await message.reply_text(
                "ü§î <b>–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üéµ",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            return
        
        user_search_results[user_id] = recs
        
        text = "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:</b>\n\n"
        keyboard = []
        
        for i, rec in enumerate(recs[:6]):
            text += f"üéµ <b>{i+1}.</b> {rec['title']}\n"
            text += f"‚è± {rec.get('duration', 'N/A')} | üë§ {rec.get('uploader', 'N/A')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å #{i+1}", callback_data=f"download_{i}"),
                InlineKeyboardButton(f"üìú –¢–µ–∫—Å—Ç #{i+1}", callback_data=f"lyrics_{i}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="recommend")])
        
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Recommendations error: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    mode = user_modes.get(user_id, "search_song")
    
    try:
        if mode == "lyrics":
            log_user_action(user, "search", f"lyrics: {text}")
            await handle_lyrics_search(update.message, text)
        elif mode == "search_artist":
            log_user_action(user, "search", f"artist: {text}")
            await handle_artist_search(update.message, text, user_id)
        else:
            log_user_action(user, "search", f"song: {text}")
            await handle_song_search(update.message, text, user_id)
    except Exception as e:
        logger.error(f"Text handler error: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def handle_song_search(message, query, user_id):
    """–ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    loading_msg = await message.reply_text(
        "üîç <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫...</b> ‚ö°",
        parse_mode=ParseMode.HTML
    )
    
    try:
        results = get_cached_search(query, 6)
        await loading_msg.delete()
        
        if not results:
            await message.reply_text(
                f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:</b> <i>{query}</i>",
                parse_mode=ParseMode.HTML
            )
            return
        
        user_search_results[user_id] = results
        
        text = f"üéµ <b>–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–µ—Å–µ–Ω:</b> <i>{query}</i>\n\n"
        keyboard = []
        
        for i, result in enumerate(results):
            text += f"üé∂ <b>{i+1}.</b> {result.get('title', 'N/A')}\n"
            text += f"üë§ {result.get('uploader', 'N/A')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(f"üì• #{i+1}", callback_data=f"download_{i}"),
                InlineKeyboardButton(f"üìú #{i+1}", callback_data=f"lyrics_{i}")
            ])
        
        keyboard.append([InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommend")])
        
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Song search error: {e}")
        await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Å–µ–Ω")

async def handle_artist_search(message, artist_name, user_id):
    """–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É"""
    loading_msg = await message.reply_text(
        f"üé≠ <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞...</b> ‚ö°",
        parse_mode=ParseMode.HTML
    )
    
    try:
        store_artist(user_id, artist_name)
        results = get_cached_search(f"{artist_name} songs", 6)
        
        await loading_msg.delete()
        
        if not results:
            await message.reply_text(
                f"‚ùå <b>–ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:</b> <i>{artist_name}</i>",
                parse_mode=ParseMode.HTML
            )
            return
        
        user_search_results[user_id] = results
        
        text = f"üé≠ <b>–ü–µ—Å–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞:</b> <i>{artist_name}</i>\n\n"
        keyboard = []
        
        for i, result in enumerate(results):
            text += f"üé∂ <b>{i+1}.</b> {result.get('title', 'N/A')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(f"üì• #{i+1}", callback_data=f"download_{i}"),
                InlineKeyboardButton(f"üìú #{i+1}", callback_data=f"lyrics_{i}")
            ])
        
        keyboard.append([InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommend")])
        
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Artist search error: {e}")
        await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞")

async def handle_lyrics_search(message, query):
    """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω"""
    loading_msg = await message.reply_text(
        f"üìú <b>–ò—â—É —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:</b> <i>{query}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        lyrics = get_lyrics(query)
        await loading_msg.delete()
        
        if lyrics:
            if len(lyrics) > 4000:
                parts = [lyrics[i:i+4000] for i in range(0, len(lyrics), 4000)]
                for i, part in enumerate(parts):
                    header = f"üìú <b>–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏</b> (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n" if i == 0 else ""
                    await message.reply_text(f"{header}<pre>{part}</pre>", parse_mode=ParseMode.HTML)
            else:
                await message.reply_text(f"üìú <b>–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:</b>\n\n<pre>{lyrics}</pre>", parse_mode=ParseMode.HTML)
        else:
            await message.reply_text(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è:</b> <i>{query}</i>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Lyrics search error: {e}")
        await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–∞")

async def handle_download(query, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        user = query.from_user
        index = int(query.data.split("_")[1])
        
        if user_id not in user_search_results or index >= len(user_search_results[user_id]):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        selected_song = user_search_results[user_id][index]
        log_user_action(user, "download", selected_song.get('title', 'Unknown'))
        save_user_search(user_id, "download", selected_song)
        
        loading_msg = await query.message.reply_text(
            f"üì• <b>–°–∫–∞—á–∏–≤–∞—é:</b> <i>{selected_song.get('title', 'Unknown')}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.HTML
        )
        
        audio_path = download_audio(selected_song.get('url', ''))
        
        if audio_path and os.path.exists(audio_path):
            with open(audio_path, 'rb') as audio_file:
                await query.message.reply_audio(
                    audio=audio_file,
                    title=selected_song.get('title', 'Unknown'),
                    caption=f"üéµ <b>{selected_song.get('title', 'Unknown')}</b>",
                    parse_mode=ParseMode.HTML
                )
            os.remove(audio_path)
            await loading_msg.delete()
            logger.info(f"‚úÖ DOWNLOAD SUCCESS: {selected_song.get('title')} for user {user.username or user.id}")
        else:
            await loading_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:</b> <i>{selected_song.get('title', 'Unknown')}</i>",
                parse_mode=ParseMode.HTML
            )
            logger.error(f"‚ùå DOWNLOAD FAILED: {selected_song.get('title')} for user {user.username or user.id}")
    except Exception as e:
        logger.error(f"Download error: {e}")
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_lyrics_from_search(query, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        user = query.from_user
        index = int(query.data.split("_")[1])
        
        if user_id not in user_search_results or index >= len(user_search_results[user_id]):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        selected_song = user_search_results[user_id][index]
        log_user_action(user, "lyrics_request", selected_song.get('title', 'Unknown'))
        
        loading_msg = await query.message.reply_text(
            f"üìú <b>–ü–æ–ª—É—á–∞—é —Ç–µ–∫—Å—Ç:</b> <i>{selected_song.get('title', 'Unknown')}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.HTML
        )
        
        lyrics = get_lyrics(selected_song.get('title', ''))
        await loading_msg.delete()
        
        if lyrics:
            if len(lyrics) > 4000:
                parts = [lyrics[i:i+4000] for i in range(0, len(lyrics), 4000)]
                for i, part in enumerate(parts):
                    header = f"üìú <b>{selected_song.get('title', 'Unknown')}</b> (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n" if i == 0 else ""
                    await query.message.reply_text(f"{header}<pre>{part}</pre>", parse_mode=ParseMode.HTML)
            else:
                await query.message.reply_text(
                    f"üìú <b>{selected_song.get('title', 'Unknown')}</b>\n\n<pre>{lyrics}</pre>",
                    parse_mode=ParseMode.HTML
                )
            logger.info(f"‚úÖ LYRICS SUCCESS: {selected_song.get('title')} for user {user.username or user.id}")
        else:
            await query.message.reply_text(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è:</b> <i>{selected_song.get('title', 'Unknown')}</i>",
                parse_mode=ParseMode.HTML
            )
            logger.warning(f"‚ö†Ô∏è LYRICS NOT FOUND: {selected_song.get('title')} for user {user.username or user.id}")
    except Exception as e:
        logger.error(f"Lyrics error: {e}")
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.inline_query.query
    user = update.effective_user
    
    if not query:
        return
    
    try:
        log_user_action(user, "inline_search", query)
        results_list = search_youtube_multiple(query, 5)
        inline_results = []
        
        for result in results_list:
            inline_results.append(
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=result.get('title', 'Unknown'),
                    input_message_content=InputTextMessageContent(result.get('title', 'Unknown')),
                    description=f"‚è± {result.get('duration', 'N/A')} | üë§ {result.get('uploader', 'N/A')}",
                )
            )
        
        await update.inline_query.answer(inline_results)
    except Exception as e:
        logger.error(f"Inline handler error: {e}")

def print_startup_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    stats = load_stats()
    users_count = len(load_users())
    
    print("=" * 70)
    print("üéµ ENHANCED MUSIC BOT –ó–ê–ü–£–©–ï–ù!")
    print("=" * 70)
    print("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ 5+ –ø–µ—Å–µ–Ω")
    print("   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   ‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("   ‚Ä¢ –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 70)
    print("üìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    print(f"   üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {stats.get('total_searches', 0)}")
    print(f"   üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats.get('total_downloads', 0)}")
    print(f"   üìú –ó–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤: {stats.get('total_lyrics', 0)}")
    print("=" * 70)
    print(f"üìù –õ–æ–≥–∏: {log_filename}")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {USERS_FILE}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {STATS_FILE}")
    print("=" * 70)

if __name__ == "__main__":
    try:
        
        print_startup_info()
        logger.info("üöÄ Enhanced Music Bot starting...")
        
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
        app.add_handler(InlineQueryHandler(inline_handler))
        
        logger.info("‚úÖ Bot handlers registered successfully")
        logger.info("üîÑ Starting polling...")
        
        app.run_polling()
        
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
