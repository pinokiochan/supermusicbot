import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, InlineQueryHandler, ContextTypes
from telegram import InlineQueryResultArticle, InputTextMessageContent
from telegram.constants import ParseMode
import asyncio
from aiohttp import web
import threading

from config import BOT_TOKEN
from utils.ytsearch import search_youtube_multiple, search_youtube, save_user_search, get_smart_recommendations
from utils.downloader import download_audio
from utils.lyrics import get_lyrics
from utils.recommender import store_artist, get_recommendations
from uuid import uuid4
import time

# –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
search_cache = {}
CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

def get_cached_search(query, count=6):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    cache_key = f"{query}_{count}"
    current_time = time.time()
    
    if cache_key in search_cache:
        cached_data, timestamp = search_cache[cache_key]
        if current_time - timestamp < CACHE_TIMEOUT:
            return cached_data
    
    # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
    results = search_youtube_multiple(query, count)
    search_cache[cache_key] = (results, current_time)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
    if len(search_cache) > 50:
        oldest_key = min(search_cache.keys(), key=lambda k: search_cache[k][1])
        del search_cache[oldest_key]
    
    return results

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_search_results = {}
user_modes = {}

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
async def health_check(request):
    return web.Response(text="üéµ Music Bot is running! ‚úÖ", status=200)

async def status_check(request):
    return web.Response(text="OK", status=200)

def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    async def create_app():
        app = web.Application()
        app.router.add_get('/', health_check)
        app.router.add_get('/health', health_check)
        app.router.add_get('/status', status_check)
        
        port = int(os.environ.get('PORT', 10000))
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        print(f"üåê Web server started on port {port}")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º —á–∞—Å
    
    def run_server():
        asyncio.run(create_app())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    welcome_text = """
üéµ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Music Search Bot!</b> üéµ

üî• <i>–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</i>

<b>‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üéØ –ü–æ–∏—Å–∫ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ 5+ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
üé≠ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É
üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω
üé™ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (5+ –ø–µ—Å–µ–Ω)
üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ MP3

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞!</b>
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏", callback_data="search_song"),
            InlineKeyboardButton("üé≠ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É", callback_data="search_artist")
        ],
        [
            InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="get_lyrics"),
            InlineKeyboardButton("üéµ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommend")
        ]
    ]
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "search_song":
        user_modes[user_id] = "search_song"
        await query.message.reply_text(
            "üîç <b>–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è –Ω–∞–π–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ üéµ",
            parse_mode=ParseMode.HTML
        )
    
    elif query.data == "search_artist":
        user_modes[user_id] = "search_artist"
        await query.message.reply_text(
            "üé≠ <b>–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ù–∞–ø–∏—à–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏ üåü",
            parse_mode=ParseMode.HTML
        )
    
    elif query.data == "get_lyrics":
        user_modes[user_id] = "lyrics"
        await query.message.reply_text(
            "üìú <b>–†–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ üé§",
            parse_mode=ParseMode.HTML
        )
    
    elif query.data == "recommend":
        await show_recommendations(query.message, user_id)
    
    elif query.data.startswith("download_"):
        await handle_download(query, user_id)
    
    elif query.data.startswith("lyrics_"):
        await handle_lyrics_from_search(query, user_id)

async def show_recommendations(message, user_id):
    """–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - –º–∏–Ω–∏–º—É–º 5 –ø–µ—Å–µ–Ω"""
    recs = get_recommendations(user_id)
    
    if not recs:
        keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search_song")]]
        await message.reply_text(
            "ü§î <b>–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üéµ",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    user_search_results[user_id] = recs
    
    text = "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:</b>\n\n"
    keyboard = []
    
    for i, rec in enumerate(recs[:6]):
        text += f"üéµ <b>{i+1}.</b> {rec['title']}\n"
        text += f"‚è± {rec['duration']} | üë§ {rec['uploader']}\n\n"
        
        keyboard.append([
            InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å #{i+1}", callback_data=f"download_{i}"),
            InlineKeyboardButton(f"üìú –¢–µ–∫—Å—Ç #{i+1}", callback_data=f"lyrics_{i}")
        ])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="recommend")])
    
    await message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    mode = user_modes.get(user_id, "search_song")

    if mode == "lyrics":
        await handle_lyrics_search(update.message, text)
    elif mode == "search_artist":
        await handle_artist_search(update.message, text, user_id)
    else:
        await handle_song_search(update.message, text, user_id)

async def handle_song_search(message, query, user_id):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    loading_msg = await message.reply_text(
        "üîç <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫...</b> ‚ö°",
        parse_mode=ParseMode.HTML
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    results = get_cached_search(query, 6)
    
    await loading_msg.delete()
    
    if not results:
        await message.reply_text(
            f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:</b> <i>{query}</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    user_search_results[user_id] = results
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    text = f"üéµ <b>–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–µ—Å–µ–Ω:</b> <i>{query}</i>\n\n"
    keyboard = []
    
    for i, result in enumerate(results):
        text += f"üé∂ <b>{i+1}.</b> {result['title']}\n"
        text += f"üë§ {result['uploader']}\n\n"
        
        keyboard.append([
            InlineKeyboardButton(f"üì• #{i+1}", callback_data=f"download_{i}"),
            InlineKeyboardButton(f"üìú #{i+1}", callback_data=f"lyrics_{i}")
        ])
    
    keyboard.append([InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommend")])
    
    await message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def handle_artist_search(message, artist_name, user_id):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É"""
    loading_msg = await message.reply_text(
        f"üé≠ <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞...</b> ‚ö°",
        parse_mode=ParseMode.HTML
    )
    
    store_artist(user_id, artist_name)
    results = get_cached_search(f"{artist_name} songs", 6)
    
    await loading_msg.delete()
    
    if not results:
        await message.reply_text(
            f"‚ùå <b>–ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:</b> <i>{artist_name}</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    user_search_results[user_id] = results
    
    text = f"üé≠ <b>–ü–µ—Å–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞:</b> <i>{artist_name}</i>\n\n"
    keyboard = []
    
    for i, result in enumerate(results):
        text += f"üé∂ <b>{i+1}.</b> {result['title']}\n\n"
        
        keyboard.append([
            InlineKeyboardButton(f"üì• #{i+1}", callback_data=f"download_{i}"),
            InlineKeyboardButton(f"üìú #{i+1}", callback_data=f"lyrics_{i}")
        ])
    
    keyboard.append([InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommend")])
    
    await message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def handle_lyrics_search(message, query):
    loading_msg = await message.reply_text(
        f"üìú <b>–ò—â—É —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:</b> <i>{query}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode=ParseMode.HTML
    )
    
    lyrics = get_lyrics(query)
    await loading_msg.delete()
    
    if lyrics:
        if len(lyrics) > 4000:
            parts = [lyrics[i:i+4000] for i in range(0, len(lyrics), 4000)]
            for i, part in enumerate(parts):
                header = f"üìú <b>–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏</b> (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n" if i == 0 else ""
                await message.reply_text(f"{header}<pre>{part}</pre>", parse_mode=ParseMode.HTML)
        else:
            await message.reply_text(f"üìú <b>–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:</b>\n\n<pre>{lyrics}</pre>", parse_mode=ParseMode.HTML)
    else:
        await message.reply_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è:</b> <i>{query}</i>",
            parse_mode=ParseMode.HTML
        )

async def handle_download(query, user_id):
    try:
        index = int(query.data.split("_")[1])
        
        if user_id not in user_search_results or index >= len(user_search_results[user_id]):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        selected_song = user_search_results[user_id][index]
        save_user_search(user_id, "download", selected_song)
        
        loading_msg = await query.message.reply_text(
            f"üì• <b>–°–∫–∞—á–∏–≤–∞—é:</b> <i>{selected_song['title']}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.HTML
        )
        
        audio_path = download_audio(selected_song['url'])
        
        if audio_path and os.path.exists(audio_path):
            with open(audio_path, 'rb') as audio_file:
                await query.message.reply_audio(
                    audio=audio_file,
                    title=selected_song['title'],
                    caption=f"üéµ <b>{selected_song['title']}</b>",
                    parse_mode=ParseMode.HTML
                )
            os.remove(audio_path)
            await loading_msg.delete()
        else:
            await loading_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:</b> <i>{selected_song['title']}</i>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_lyrics_from_search(query, user_id):
    try:
        index = int(query.data.split("_")[1])
        
        if user_id not in user_search_results or index >= len(user_search_results[user_id]):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        selected_song = user_search_results[user_id][index]
        
        loading_msg = await query.message.reply_text(
            f"üìú <b>–ü–æ–ª—É—á–∞—é —Ç–µ–∫—Å—Ç:</b> <i>{selected_song['title']}</i>\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.HTML
        )
        
        lyrics = get_lyrics(selected_song['title'])
        await loading_msg.delete()
        
        if lyrics:
            if len(lyrics) > 4000:
                parts = [lyrics[i:i+4000] for i in range(0, len(lyrics), 4000)]
                for i, part in enumerate(parts):
                    header = f"üìú <b>{selected_song['title']}</b> (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n" if i == 0 else ""
                    await query.message.reply_text(f"{header}<pre>{part}</pre>", parse_mode=ParseMode.HTML)
            else:
                await query.message.reply_text(
                    f"üìú <b>{selected_song['title']}</b>\n\n<pre>{lyrics}</pre>",
                    parse_mode=ParseMode.HTML
                )
        else:
            await query.message.reply_text(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è:</b> <i>{selected_song['title']}</i>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query
    if not query:
        return
    
    results_list = search_youtube_multiple(query, 5)
    inline_results = []
    
    for result in results_list:
        inline_results.append(
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=result['title'],
                input_message_content=InputTextMessageContent(result['title']),
                description=f"‚è± {result['duration']} | üë§ {result['uploader']}",
            )
        )
    
    await update.inline_query.answer(inline_results)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs("downloads", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
    start_web_server()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(InlineQueryHandler(inline_handler))

    print("üéµ Music Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    print("‚ú® –§—É–Ω–∫—Ü–∏–∏:")
    print("   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ 5+ –ø–µ—Å–µ–Ω")
    print("   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   ‚Ä¢ Health check —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É", os.environ.get('PORT', 10000))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()
